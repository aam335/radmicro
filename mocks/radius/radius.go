// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aam335/go-radius (interfaces: ResponseWriter)

// Package mock_go_radius is a generated GoMock package.
package mock_go_radius

import (
	go_radius "github.com/aam335/go-radius"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockResponseWriter is a mock of ResponseWriter interface
type MockResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterMockRecorder
}

// MockResponseWriterMockRecorder is the mock recorder for MockResponseWriter
type MockResponseWriterMockRecorder struct {
	mock *MockResponseWriter
}

// NewMockResponseWriter creates a new mock instance
func NewMockResponseWriter(ctrl *gomock.Controller) *MockResponseWriter {
	mock := &MockResponseWriter{ctrl: ctrl}
	mock.recorder = &MockResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseWriter) EXPECT() *MockResponseWriterMockRecorder {
	return m.recorder
}

// AccessAccept mocks base method
func (m *MockResponseWriter) AccessAccept(arg0 ...*go_radius.Attribute) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessAccept", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccessAccept indicates an expected call of AccessAccept
func (mr *MockResponseWriterMockRecorder) AccessAccept(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessAccept", reflect.TypeOf((*MockResponseWriter)(nil).AccessAccept), arg0...)
}

// AccessChallenge mocks base method
func (m *MockResponseWriter) AccessChallenge(arg0 ...*go_radius.Attribute) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessChallenge", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccessChallenge indicates an expected call of AccessChallenge
func (mr *MockResponseWriterMockRecorder) AccessChallenge(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessChallenge", reflect.TypeOf((*MockResponseWriter)(nil).AccessChallenge), arg0...)
}

// AccessReject mocks base method
func (m *MockResponseWriter) AccessReject(arg0 ...*go_radius.Attribute) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessReject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccessReject indicates an expected call of AccessReject
func (mr *MockResponseWriterMockRecorder) AccessReject(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessReject", reflect.TypeOf((*MockResponseWriter)(nil).AccessReject), arg0...)
}

// AccountingACK mocks base method
func (m *MockResponseWriter) AccountingACK(arg0 ...*go_radius.Attribute) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountingACK", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountingACK indicates an expected call of AccountingACK
func (mr *MockResponseWriterMockRecorder) AccountingACK(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountingACK", reflect.TypeOf((*MockResponseWriter)(nil).AccountingACK), arg0...)
}

// LocalAddr mocks base method
func (m *MockResponseWriter) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr
func (mr *MockResponseWriterMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockResponseWriter)(nil).LocalAddr))
}

// RemoteAddr mocks base method
func (m *MockResponseWriter) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr
func (mr *MockResponseWriterMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockResponseWriter)(nil).RemoteAddr))
}

// SetReplicationDestinations mocks base method
func (m *MockResponseWriter) SetReplicationDestinations(arg0 []*net.UDPAddr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplicationDestinations", arg0)
}

// SetReplicationDestinations indicates an expected call of SetReplicationDestinations
func (mr *MockResponseWriterMockRecorder) SetReplicationDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicationDestinations", reflect.TypeOf((*MockResponseWriter)(nil).SetReplicationDestinations), arg0)
}

// SetReplyReplication mocks base method
func (m *MockResponseWriter) SetReplyReplication(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplyReplication", arg0)
}

// SetReplyReplication indicates an expected call of SetReplyReplication
func (mr *MockResponseWriterMockRecorder) SetReplyReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplyReplication", reflect.TypeOf((*MockResponseWriter)(nil).SetReplyReplication), arg0)
}

// Write mocks base method
func (m *MockResponseWriter) Write(arg0 *go_radius.Packet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockResponseWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponseWriter)(nil).Write), arg0)
}
