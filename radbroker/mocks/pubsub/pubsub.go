// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPubSub is a mock of PubSub interface
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// Fire mocks base method
func (m *MockPubSub) Fire(topic string, pairs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fire", topic, pairs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fire indicates an expected call of Fire
func (mr *MockPubSubMockRecorder) Fire(topic, pairs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fire", reflect.TypeOf((*MockPubSub)(nil).Fire), topic, pairs)
}

// Req mocks base method
func (m *MockPubSub) Req(ctx context.Context, topic, key string, pairs map[string]string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Req", ctx, topic, key, pairs)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Req indicates an expected call of Req
func (mr *MockPubSubMockRecorder) Req(ctx, topic, key, pairs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Req", reflect.TypeOf((*MockPubSub)(nil).Req), ctx, topic, key, pairs)
}
